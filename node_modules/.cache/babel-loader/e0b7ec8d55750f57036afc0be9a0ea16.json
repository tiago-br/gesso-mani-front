{"ast":null,"code":"import axios from \"axios\";\n\nclass Api {\n  constructor() {\n    this.login = async payload => {\n      const {\n        data\n      } = await this.api.post('/login', payload);\n      const {\n        token\n      } = data;\n      localStorage.setItem('token', token);\n    };\n\n    this.signup = async payload => {\n      await this.api.post('/signup', payload);\n    };\n\n    this.getUsers = async () => {\n      return await this.api.get('/signup');\n    };\n\n    this.deleteOrcamento = async id => {\n      await this.api.delete(`/orcamento/${id}`);\n    };\n\n    this.getOrcamento = async () => {\n      return await this.api.get('/orcamento');\n    };\n\n    this.postOrcamento = async payload => {\n      await this.api.post('/orcamento', payload);\n    };\n\n    this.getProduto = async () => {\n      return await this.api.get('/produtos');\n    };\n\n    this.deleteProduto = async id => {\n      await this.api.delete(`/produtos/${id}`);\n    };\n\n    this.postProduto = async payload => {\n      await this.api.post('/produtos', payload);\n    };\n\n    this.putVendaParaProduto = async (name, payload) => {\n      //payload é um objeto no formato {quantidade:Number}\n      await this.api.put(`/produtos/${name}`, payload);\n    };\n\n    this.putProduto = async (id, payload) => {\n      await this.api.put(`/produtos/estoque/${id}`, payload);\n    };\n\n    this.getVendas = async () => {\n      return await this.api.get('/vendas');\n    };\n\n    this.postVenda = async payload => {\n      await this.api.post('/vendas', payload);\n    };\n\n    this.deleteVenda = async id => {\n      await this.api.delete(`/vendas/${id}`);\n    };\n\n    this.deleteUmProdutoVenda = async (idVenda, idProduto) => {\n      await this.api.delete(`/vendas/${idVenda}/${idProduto}`);\n    };\n\n    this.api = axios.create({\n      baseURL: \"http://localhost:5000\"\n    });\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        config.headers = {\n          Authorization: `Bearer ${token}`\n        };\n      }\n\n      return config;\n    }, error => console.log(error));\n    this.api.interceptors.response.use(response => response, error => {\n      if (error.response.status === 400) {\n        localStorage.removeItem('token');\n        window.location = \"/area-do-funcionario\";\n      }\n\n      throw error;\n    });\n  }\n\n}\n\nexport default new Api();","map":{"version":3,"sources":["/home/tiago-r/Documentos/GESSOFRONT/gesso-mani-front/src/utils/api.util.js"],"names":["axios","Api","constructor","login","payload","data","api","post","token","localStorage","setItem","signup","getUsers","get","deleteOrcamento","id","delete","getOrcamento","postOrcamento","getProduto","deleteProduto","postProduto","putVendaParaProduto","name","put","putProduto","getVendas","postVenda","deleteVenda","deleteUmProdutoVenda","idVenda","idProduto","create","baseURL","interceptors","request","use","config","getItem","headers","Authorization","error","console","log","response","status","removeItem","window","location"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\n\nclass Api {\n    constructor(){\n        this.api = axios.create({\n            baseURL: \"http://localhost:5000\"\n        })\n        this.api.interceptors.request.use(\n            (config) => {\n              const token = localStorage.getItem('token');\n              \n              \n              if(token) {\n                config.headers = {\n                  Authorization: `Bearer ${token}`,\n                }\n              }\n              \n              return config\n            },\n            (error) => console.log(error)\n          )\n          \n          this.api.interceptors.response.use(\n            (response) => response,\n            ((error) => {\n              if (error.response.status === 400){\n                \n                localStorage.removeItem('token')\n                window.location = \"/area-do-funcionario\"\n              }\n              throw error\n            }\n          )\n        )\n    };\n    \n    login =  async (payload) =>{\n      const {data} = await this.api.post('/login',payload)\n      const {token} = data\n      localStorage.setItem('token',token)\n    }\n\n    signup = async (payload) => {\n\n      await this.api.post('/signup',payload)\n    }\n\n    getUsers = async () => {\n\n      return await this.api.get('/signup')\n    }\n    // orçamento route metodos:\n      //metodo delete\n    deleteOrcamento = async (id) =>{\n\n      await this.api.delete(`/orcamento/${id}`)\n\n    }\n      //retorna todos os orçamentos\n    getOrcamento = async () =>{\n      return await this.api.get('/orcamento')\n    }\n      //cria um novo orcamento a partir da venda\n    postOrcamento = async (payload) => {\n      await this.api.post('/orcamento',payload)\n    }\n\n    // produtos route metodos:\n      //metodo get, pegar todos os produtos \n    getProduto = async () =>{\n      return await this.api.get('/produtos')\n    }\n      //metodo delete, deleta um orçamento inteiro de acordo com o Id\n    deleteProduto = async (id) =>{\n      await this.api.delete(`/produtos/${id}`)\n    }\n      //metodo post, cria um novo produto\n    postProduto = async (payload) =>{\n      await this.api.post('/produtos',payload)\n    }\n      //metodo put, para alterar a quantidade a partir de venda\n    putVendaParaProduto = async (name,payload)=> {\n      //payload é um objeto no formato {quantidade:Number}\n      await this.api.put(`/produtos/${name}`,payload)\n    }\n      //metodo put, altera o produto inteiro a partir da aba estoque\n    putProduto = async (id,payload) =>{\n      await this.api.put(`/produtos/estoque/${id}`,payload)\n    }\n    //venda route metodos:\n      //retorna todas as vendas\n    getVendas = async () =>{\n      return await this.api.get('/vendas')\n    }\n      //post, cria uma nova venda\n    postVenda = async (payload) => {\n      await this.api.post('/vendas', payload)\n    }\n      //delete a venda inteira \n    deleteVenda = async (id) =>{\n      await this.api.delete(`/vendas/${id}`)\n    }\n      //delete um produto da venda\n    deleteUmProdutoVenda = async (idVenda,idProduto) =>{\n      await this.api.delete(`/vendas/${idVenda}/${idProduto}`)\n    }\n}\n\nexport default new Api()"]},"metadata":{},"sourceType":"module"}